<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <appSettings>
    <!--对应的大区编号(一个WEBSERVICE对应一个大区) 该配置项 废弃：多大区使用-->
    <add key="BigZoneID" value="0" />
    <!-- 使用此WEBSERVICE的远程服务地址,如:GSS系统服务端的IP,只允许此IP访问(如果为访问地址为localhost或127.0.0.1,请在此处写127.0.0.1);配合IIS做IP限制,双重安全 -->
    <!--允许多个IP,请用,隔开-->
    <add key="LimitRemoteServer" value="false" />
    <!--是否限制远程访问的机器IP-->
    <add key="RemoteServerIP" value="127.0.0.1,192.168.1.121,192.168.7.100,172.24.221.1" />
    <!-- 连接字符串是否加密 [暂未使用] -->
    <add key="ConStringEncrypt" value="false" />
    <!-- 数据库连接字符串,（如果采用加密方式，上面一项要设置为true；
     如果使用明文这样server=127.0.0.1;database=.....,上面则设置为false。 -->
    <!--<add key="ConnStrUserCoreDB" value="ACA855DB07C9C09485DF4134FDE4FCFFE75BF79F3462201FF9263930CB7849C9471343B419060737D2D327DE81BFD961A2C67CEDB295DA384D3F08E7B0EB4032"/>
    <add key="ConnStrGameCoreDB" value="ACA855DB07C9C09485DF4134FDE4FCFFE75BF79F3462201FB5697BC5952D896BF63C7CA0628A7B4AC69DAB606866C2FA6EC19465808A2D07FA269C31151495FC"/>-->
    <!--<add key="ConnStrUserCoreDB" value="server=11.0.3.240;database=UserCoreDB;uid=thyoung;pwd=5225qs5a5a#" />
    <add key="ConnStrGameCoreDB" value="server=11.0.3.241;database=GameCoreDB;uid=thyoung;pwd=5225qs5a5a#" />-->
    <add key="ConnStrUserCoreDB" value="server=127.0.0.1;database=UserCoreDB;uid=sa;pwd=5225qs5a5a#" />
    <add key="ConnStrGameCoreDB" value="server=127.0.0.1;database=GameCoreDB;uid=sa;pwd=5225qs5a5a#" />
    <add key="ConnStrGSSDB" value="server=.;database=GSSDB;uid=sa;pwd=5225qs5a5a#" />
    <!--新增GSSDB连接串 以适用多大区-->
    <add key="AppLanguage" value="" />
    <add key="GameDBStringFromDB" value="false" />
    <!--游戏库的数据库连接串来自GSSDB 此处设置true ConnStrUserCoreDB，ConnStrGameCoreDB则不使用 此处需要检查数据库中排序规则是否一致，否则此处调用的存储过程不存在-->
    <!--zh-cn  ko-kr-->
  </appSettings>
  <system.web>
    <!-- 
            设置 compilation debug="true" 可将调试符号插入
            已编译的页面中。但由于这会 
            影响性能，因此只在开发过程中将此值 
            设置为 true。
        -->
    <compilation debug="true" targetFramework="4.0" />
    <!--
            通过 <authentication> 节可以配置 ASP.NET 用来 
            识别进入用户的
            安全身份验证模式。 
       -->
    <authentication mode="Windows" />
    <!--
            如果在执行请求的过程中出现未处理的错误，
            则通过 <customErrors> 节可以配置相应的处理步骤。具体说来，
            开发人员通过该节可以配置
            要显示的 html 错误页
            以代替错误堆栈跟踪。

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
    <pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID" />
  </system.web>
  <system.webServer>
    <directoryBrowse enabled="true" />
  </system.webServer>
  <!--策略等级,受策略限制时启用-->
  <!--<location path="" allowOverride="false">
    <system.web>
      <trust level="Full"/>
    </system.web>
  </location>-->
  <!-- 
        在 Internet 信息服务 7.0 下运行 ASP.NET AJAX 需要 system.webServer
        节。对早期版本的 IIS 来说则不需要此节。
    -->
</configuration>